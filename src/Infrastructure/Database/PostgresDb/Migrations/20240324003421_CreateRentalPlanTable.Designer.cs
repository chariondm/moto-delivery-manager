// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotoDeliveryManager.Infrastructure.Database.PostgresDb.Configurations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MotoDeliveryManager.Infrastructure.Database.PostgresDb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240324003421_CreateRentalPlanTable")]
    partial class CreateRentalPlanTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MotoDeliveryManager.Core.Domain.DeliveryDrivers.DeliveryDriver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("delivery_driver_id");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("character varying(14)")
                        .HasColumnName("cnpj");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id")
                        .HasName("delivery_driver_pk");

                    b.HasIndex("Cnpj")
                        .IsUnique()
                        .HasDatabaseName("delivery_driver_uk_cnpj");

                    b.ToTable("delivery_driver", (string)null);
                });

            modelBuilder.Entity("MotoDeliveryManager.Core.Domain.Motorcycles.Motorcycle", b =>
                {
                    b.Property<Guid>("MotorcycleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("motorcycle_id");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_plate");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("updated_at")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MotorcycleId")
                        .HasName("motorcycle_pk");

                    b.HasIndex("LicensePlate")
                        .IsUnique()
                        .HasDatabaseName("motorcycle_uk_licenseplate");

                    b.ToTable("motorcycle", (string)null);
                });

            modelBuilder.Entity("MotoDeliveryManager.Core.Domain.Rentals.RentalPlan", b =>
                {
                    b.Property<Guid>("RentalPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("rental_plan_id");

                    b.Property<decimal>("AdditionalDailyCost")
                        .HasColumnType("numeric")
                        .HasColumnName("additional_daily_cost");

                    b.Property<decimal>("DailyCost")
                        .HasColumnType("numeric")
                        .HasColumnName("daily_cost");

                    b.Property<int>("DurationDays")
                        .HasColumnType("integer")
                        .HasColumnName("duration_days");

                    b.Property<decimal>("PenaltyPercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("penalty_percentage");

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 24, 0, 34, 21, 524, DateTimeKind.Utc).AddTicks(6807));

                    b.Property<DateTime>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 3, 24, 0, 34, 21, 524, DateTimeKind.Utc).AddTicks(7150));

                    b.HasKey("RentalPlanId")
                        .HasName("rental_plan_pk");

                    b.ToTable("rental_plan", (string)null);

                    b.HasData(
                        new
                        {
                            RentalPlanId = new Guid("fc4ac394-4f6f-4405-9a3e-64aa8ca6f0d2"),
                            AdditionalDailyCost = 50m,
                            DailyCost = 30m,
                            DurationDays = 7,
                            PenaltyPercentage = 0.2m
                        },
                        new
                        {
                            RentalPlanId = new Guid("6b354ecb-d9c9-4c6b-847f-ca92d06125d5"),
                            AdditionalDailyCost = 50m,
                            DailyCost = 28m,
                            DurationDays = 15,
                            PenaltyPercentage = 0.4m
                        },
                        new
                        {
                            RentalPlanId = new Guid("b07cb1de-3c4d-43fb-9e68-0caaa42dda41"),
                            AdditionalDailyCost = 50m,
                            DailyCost = 22m,
                            DurationDays = 30,
                            PenaltyPercentage = 0.6m
                        });
                });

            modelBuilder.Entity("MotoDeliveryManager.Core.Domain.DeliveryDrivers.DeliveryDriver", b =>
                {
                    b.OwnsOne("MotoDeliveryManager.Core.Domain.DeliveryDrivers.DriverLicense", "DriverLicense", b1 =>
                        {
                            b1.Property<Guid>("DeliveryDriverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Category")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("driver_license_category");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("driver_license_number");

                            b1.Property<string>("PhotoPath")
                                .HasColumnType("text")
                                .HasColumnName("driver_license_photo_path");

                            b1.HasKey("DeliveryDriverId");

                            b1.HasIndex("Number")
                                .IsUnique()
                                .HasDatabaseName("delivery_driver_uk_driverlicensenumber");

                            b1.ToTable("delivery_driver");

                            b1.WithOwner()
                                .HasForeignKey("DeliveryDriverId");
                        });

                    b.Navigation("DriverLicense")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
